// ===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ===----------------------------------------------------------------------===//
@Unlisted
module pkl.python.internal.utils

import "pkl:reflect"

local pcfRenderer: PcfRenderer = new { useCustomStringDelimiters = true }

/// Turn the Pkl string into a Python string literal.
///
/// We can use the pcf renderer here because Pkl and Python share almost the same grammar for
/// strings.
function toPythonString(str: String): String = pcfRenderer.renderValue(str)

// noinspection UnresolvedElement
function getPythonNameAnnotation(source: reflect.Declaration): String? =
  source
    .annotations
    .findOrNull((it) -> it.getClass().toString() == "pkl.python.python#Name")
    ?.value

/// Converts a Pkl declaration (class, property, typealias) into a Python name.
/// If a member has an explicit `@python.Name` annotation, use it.
///
/// Otherwise, normalize the name and return it.
///
/// Normalization rules:
///
/// 1. Any non-letter and non-digit characters get stripped, and each proceding letter gets capitalized.
/// 2. If a name does not start with a latin alphabet character, prefix with `N`.
/// 3. Capitalize names so they get exported.
function toPythonName(source: reflect.Declaration): String =
  // Edge case: if we are generating a module class, always call it `Module`.
  /*if (source is reflect.Class && source.enclosingDeclaration.moduleClass == source) "Module"
  else getPythonNameAnnotation(source) ?? normalizeName(source.name)*/

  // Edge case: if we are generating a module class, always call it by it's module name.
  if (source is reflect.Class && source.enclosingDeclaration.moduleClass == source)
    let( moduleName = source.enclosingDeclaration.name )
      moduleName.split(".").last
    //source.name //"Module"
  else getPythonNameAnnotation(source) ?? normalizeName(source.name)

function normalizeModuleName(name: String): String =
  let (normalized = normalizeName(name.replaceAll(".", "_")).toLowerCase())
    normalized

keywords: List<String> = List(
  "False",
  "None",
  "True",
  "and",
  "as",
  "assert",
  "async",
  "await",
  "break",
  "class",
  "continue",
  "def",
  "del",
  "elif",
  "else",
  "except",
  "finally",
  "for",
  "from",
  "global",
  "if",
  "import",
  "in",
  "is",
  "lambda",
  "nonlocal",
  "not",
  "or",
  "pass",
  "raise",
  "return",
  "try",
  "while",
  "with",
  "yield"
)

function renderDocComment(docComment: String, indent: String) =
  docComment
    .split(Regex(#"\r?\n"#))
    .map((it) ->
      if (it.trim().isBlank) "\(indent)#"
      else "\(indent)# \(it)"
    )
    .join("\n")

function renderHeaderComment(`module`: reflect.Module) =
  "# Code generated from Pkl module `\(`module`.name)`. DO NOT EDIT."

function normalizeEnumName(name: String) =
  if (name == "") "empty"
  else
    let (normalized = normalizeName(name))
      normalized[0].toLowerCase() + normalized.drop(1)

function normalizeName(name: String) =
  /*
  if (keywords.contains(name)) "`\(name)`"
  else
    let (parts = name.split(Regex(#"(?u)[^\p{L}\d_]"#)))
      parts.first + parts.drop(1).map((p) -> p.capitalize()).join("")
  */
    let (parts = name.split(Regex(#"(?u)[^\p{L}\d_]"#)))
      parts.join("_")

function renderImports(imports: List<String>): String =
  let (distinctImports = imports.distinct)
    new Listing {
      for (imp in distinctImports) {
        "import \(imp)"
      }
    }.join("\n") + "\n"

function isModuleClass(source: reflect.Declaration): Boolean =
  source is reflect.Class && source.enclosingDeclaration.moduleClass == source
