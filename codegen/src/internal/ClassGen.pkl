// ===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ===----------------------------------------------------------------------===//
@Unlisted
module pkl.python.internal.ClassGen

extends "Gen.pkl"

import "pkl:reflect"
import "PythonMapping.pkl"
import "utils.pkl"
import "Type.pkl"
import "typegen.pkl"

clazz: reflect.Class = mapping.source as reflect.Class

classInfo: PythonMapping.Class = mapping as PythonMapping.Class

structs: Mapping<String, String>

topLevelContents = imports.join("\n")

contents = new Listing {
  inner
}.join("\n")

local superClasses: String =
  if (superClass != null)
    if (classInfo.namespaceName == superClass.namespaceName)
      "(" + superClass.inner.name + ")"
    else
      "(\(superClass.namespaceName)_pkl.\(superClass.inner.name))"
  else
    ""

local inner: String =
new Listing {
  when (clazz.docComment != null) {
    utils.renderDocComment(clazz.docComment!!, "")
    "\n"
  }
  "@dataclass"
  "class \(classInfo.inner.name)\(superClasses):"
  when (!properties.isEmpty) {
    for (pklPropertyName, field in properties) {
      renderProperty(field)
      ""
    }
  }
  "\(module.indent)_registered_identifier = \(utils.toPythonString(classInfo.source.reflectee.toString()))"
 }.join("\n")

local isAbstract: Boolean = clazz.modifiers.contains("abstract")

local superClass: PythonMapping.Class? =
    mappings.findOrNull(
      (c) -> c is PythonMapping.Class && c.clazz == clazz.superclass) as PythonMapping.Class?

local properties: Map<String, Property> = getProperties(clazz, mappings)

/*
local imports: List<String> =
  properties.values
    .flatMap((f) -> f.type.imports)
    .filter((i) -> i != classInfo.pythonModuleName).distinct
  + (if (superClass != null && superClass.pythonModuleName != classInfo.pythonModuleName) List(superClass.pythonModuleName) else List())
  + (if (isModule && !isAbstract) List("PklPython") else List())
*/
local imports: List<String> =
  properties.values
    .flatMap((f) -> f.type.renderImports(classInfo.namespaceName))
    //.filter((i) -> i != classInfo.namespaceName.distinct)
  + (
    if (superClass != null && superClass.namespaceName != classInfo.namespaceName)
      //List("from . import " + superClass.namespaceName+ "_pkl."+ superClass.namespaceName)
      List("from . import " + superClass.namespaceName+ "_pkl")
    else
      List()
    )

local isModule: Boolean = clazz.enclosingDeclaration.moduleClass == clazz

local function getAllProperties(clazz: reflect.Class?): List<reflect.Property> =
  if (clazz == null) List()
  else if (doesNotInherit(clazz)) clazz.properties.values
  else clazz.properties.values + getAllProperties(clazz.superclass!!)

local function isSameType(typeA: reflect.Type, typeB: reflect.Type) =
  if (typeA is reflect.DeclaredType && typeB is reflect.DeclaredType)
    typeA.referent.reflectee == typeB.referent.reflectee
  else if (typeA is reflect.NullableType && typeB is reflect.NullableType)
    isSameType(typeA.member, typeB.member)
  else if (typeA is reflect.NothingType && typeB is reflect.NothingType)
    true
  else if (typeA is reflect.UnknownType && typeB is reflect.UnknownType)
    true
  else if (typeA is reflect.StringLiteralType && typeB is reflect.StringLiteralType)
    typeA.value == typeB.value
  // union types turn into Python `AnyHashable?`, so we can say that this is always fine.
  else if (typeA is reflect.UnionType && typeB is reflect.UnionType)
    true
  // remaining types: `FunctionType`, `TypeParameter`, `ModuleType`.
  // we can actually check if `ModuleType` refers to the same type by checking if the enclosing declaration is the same,
  // but we will pretend it is always false for now.
  else false

// visible for testing
function getProperties(
  clazz: reflect.Class,
  mappings: List<PythonMapping>
): Map<String, Property> =
  let (isSuperOpenOrAbstract: Boolean =
    clazz.superclass.modifiers.contains("open") || clazz.superclass.modifiers.contains("abstract"))
  // add the properties of the superclass as fields unless it is an open class (because its struct gets embedded),
  // or the class does not inherit.
  let (superFields: Map<String, Property> =
    if (doesNotInherit(clazz)) Map()
    else getProperties(clazz.superclass!!, mappings)
  )
  let (superProperties = getAllProperties(clazz.superclass))
    //superFields.mapValues((_, field) -> (field) { isInherited = true }) +
    clazz.properties
      .filter((propName, prop: reflect.Property) ->
        let (superProp = superProperties.findOrNull((it) -> it.name == prop.name))
          // don't render hidden members
          if (prop.modifiers.contains("hidden")) false
          else true
          /*
          // Okay if there is no property override, or if the super property has the same type.
          else if (superProp == null || isSameType(superProp.type, prop.type)) true
          // Okay if the property is overridden but does not define a type, but don't render as its own field.
          // E.g. `class Foo extends Bar { bar = "mybar" }`
          // else if (prop.type is reflect.UnknownType) !isSuperOpenOrAbstract
          else if (prop.type is reflect.UnknownType) true
          // Otherwise, the property's type has been overridden and this is possible to
          // represent in Python, but makes it harder to generate common getters for enums.
          else throw("""
              Illegal: Class `\(clazz.reflectee)` overrides property `\(propName)`. This is not supported when generating Python.

              \(prop.location.displayUri)
              """)
          */
      )
      .mapValues((_, prop: reflect.Property) ->
        let (superProp = superFields.getOrNull(prop.name))
        if (superProp == null)
          new Property {
            isInherited = false
            type = typegen.generateType(prop.type, clazz, mappings)
            docComment = prop.docComment
            name = utils.toPythonName(prop)
            property = prop
          }
        else
          (superProp) {
            isInherited = True
            when (!(prop.type is reflect.UnknownType)){
              type = typegen.generateType(prop.type, clazz, mappings)
            }
            docComment = prop.docComment
            property = prop
          }
          /*
          new Property {
            isInherited = false
            type = typegen.generateType(prop.type, clazz, mappings)
            docComment = prop.docComment
            name = utils.toPythonName(prop)
            property = prop
          }
          */
      )
      //) + superFields.mapValues((_, field) -> (field) { isInherited = true })

local function doesNotInherit(clazz: reflect.Class?) =
  clazz.superclass == null
  || clazz.superclass.reflectee == Typed

/*
local struct: String = new Listing {
  when (clazz.docComment != null) {
    utils.renderDocComment(clazz.docComment!!, "")
    "\n"
  }
  "struct \(classInfo.struct.name): "
  structSuperclasses
  "\n"
  "\(module.indent)static let registeredIdentifier: String = \(utils.toPythonString(classInfo.source.reflectee.toString()))\n\n"
  when (!properties.isEmpty) {
    for (pklPropertyName, field in properties) {
      when (pklPropertyName != properties.keys.first) {
        "\n"
      }
      renderProperty(field)
    }
    "\n"
  }
  synthesisedInit
  when (properties.values.any((p) -> p.isPolymorphic)) {
    // need to implement ==, hash and both inits
    "\n\n"
    synthesisedEqualsEquals
    "\n\n"
    synthesisedHash
    "\n\n"
    synthesisedInitDecoder
  } else {
    when (properties.values.any((p) -> p.isAny)) {
      // need to implement both inits
      "\n\n"
      synthesisedInitDecoder
    }
  }
  when (codingKeys != null) {
    "\n\n"
    codingKeys
  }
}.join("")
*/

/*
local struct: String = new Listing {
  when (clazz.docComment != null) {
    utils.renderDocComment(clazz.docComment!!, "")
    "\n"
  }
  "class \(classInfo.struct.name): "
  "\n"
  "registeredIdentifier: str = \(utils.toPythonString(classInfo.source.reflectee.toString()))\n\n"
  when (!properties.isEmpty) {
    for (pklPropertyName, field in properties) {
      when (pklPropertyName != properties.keys.first) {
        "\n"
      }
      renderProperty(field)
    }
  }
  when (properties.values.any((p) -> p.isPolymorphic)) {
    // need to implement ==, hash and both inits
    "\n\n"
    synthesisedEqualsEquals
    "\n\n"
    synthesisedHash
    "\n\n"
    synthesisedInitDecoder
  } else {
    when (properties.values.any((p) -> p.isAny)) {
      // need to implement both inits
      "\n\n"
      synthesisedInitDecoder
    }
  }
  when (codingKeys != null) {
    "\n\n"
    codingKeys
  }
}.join("")
*/

local function renderPropertyBase(property: Property): String =
  let (
    type =
      if (property.type is Type.Declared)
        (property.type) { isUserDefined = false }.render(classInfo.namespaceName) // don't put double quotes
      else
        property.type.render(classInfo.namespaceName)
  )
  "\(module.indent)\(property.name): \(type)"

local function renderProperty(property: Property) = new Listing {
  when (property.docComment != null) {
    utils.renderDocComment(property.docComment!!, module.indent)
    "\n"
  }
  renderPropertyBase(property)
}.join("")

const local function canBeDefault(property: reflect.Property): Boolean =
  let (value = property.defaultValue)
    typegen.mappedTypes.keys.any((it) ->
      if (it is TypeAlias)
        value is reflect.TypeAlias(it)
      else
        value is reflect.Class(it)
    )

const local function renderDefault(property: reflect.Property): String? =
  let(value = property.defaultValue)
  if (value == null) null
  else if (value is String) "\"\(value)\""
  else if (canBeDefault(property)) "\(value)"
  else null

local class Property {
  /// Is this property inherited from a parent?
  isInherited: Boolean

  /// The name of the property
  name: String

  /// The Python type associated with this field
  type: Type

  /// The doc comments on the field
  docComment: String?

  /// The Pkl property behind the field
  property: reflect.Property

  /// True if the field is not a concrete type
  isPolymorphic: Boolean = type.isPolymorphic

  /// True if this field represents the Pkl type Any
  isAny: Boolean = type.isAny
}
