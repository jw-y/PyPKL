// ===----------------------------------------------------------------------===//
// Copyright Â© 2024 Apple Inc. and the Pkl project authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ===----------------------------------------------------------------------===//
@Unlisted
module pkl.python.internal.PythonNamespace

import "pkl:reflect"
import "ClassGen.pkl"
import "EnumGen.pkl"
import "TypeAliasGen.pkl"
import "PythonMapping.pkl"
import "Gen.pkl"
import "utils.pkl"
import "typegen.pkl"

`module`: reflect.Module

/// All mappings used by the module, including imports.
mappings: List<PythonMapping>

/// The name of the Pkl module.
pklModuleName: String

/// The mappings originate from this module.
moduleMappings: List<PythonMapping>

/// The Python namespace in which to place these mappings.
namespaceName: String

indent: String

local function describeLocation(src: reflect.TypeDeclaration) =
  let (memberType =
    if (src is reflect.Class && src.enclosingDeclaration.moduleClass == src) "module"
    else if (src is reflect.Class) "class"
    else "typealias"
  )
    "* \(memberType) `\(src.reflectee)` (\(src.location.displayUri))"

local function hasUniqueNames(): Boolean =
  let (names = moduleMappings.map((it) -> it.name))
    if (names.isDistinct) true
    else
      let (duplicateNames = moduleMappings.filter((it) -> moduleMappings.count((m) -> m.name == it.name) > 1))
      let (locations = duplicateNames.map((it) -> describeLocation(it.source)).join("\n"))
        throw("""
          Conflict: multiple Pkl declarations compute to Python name `\(duplicateNames.first.name)`.

          To resolve this conflict, add a `@python.Name` annotation to any of the following declarations:

          \(locations)

          For example:

          ```
          @python.Name { value = "CrabCakes" }
          class Crab_Cakes
          ```
          """)

local generated: List<Gen>(hasUniqueNames()) = moduleMappings.map((it) ->
  if (it is PythonMapping.Class)
    new ClassGen {
      indent = module.indent
      mappings = module.mappings
      mapping = it
      namespaceName = it.namespaceName
    }
  else
    new TypeAliasGen {
      indent = module.indent
      mappings = module.mappings
      mapping = it
      namespaceName = it.namespaceName
    }
)

local topLevelContents = generated.mapNonNull((g) -> g.topLevelContents).distinct.filter((it) -> !(it.isEmpty))

/*
local convenienceLoaders = """
  /// Load the Pkl module at the given source and evaluate it into `\(namespaceName).Module`.
  ///
  /// - Parameter source: The source of the Pkl module.
  static func loadFrom(source: ModuleSource) async throws -> \(namespaceName).Module {
  \(module.indent)try await PklPython.withEvaluator { evaluator in
  \(module.indent.repeat(2))try await loadFrom(evaluator: evaluator, source: source)
  \(module.indent)}
  }

  /// Load the Pkl module at the given source and evaluate it with the given evaluator into
  /// `\(namespaceName).Module`.
  ///
  /// - Parameter evaluator: The evaluator to use for evaluation.
  /// - Parameter source: The module to evaluate.
  def load_from(
  \(module.indent)evaluator: PklPython.Evaluator,
  \(module.indent)source: PklPython.ModuleSource
  ) async throws -> \(namespaceName).Module {
  \(module.indent)try await evaluator.evaluateModule(source: source, as: Module.self)
  }
  """
*/
local function isTypeAlias(clazz, type) =
  if (type is reflect.UnionType)
    type.members.any((it) -> isTypeAlias(clazz, it) )
  else if (type is reflect.StringLiteralType)
    false
  else if (type is reflect.NullableType)
    isTypeAlias(clazz, type.member)
  else if (type is reflect.DeclaredType)
    let(referent = type.referent)
    let(reflectee = type.referent.reflectee)
    //let(_ = trace(List(clazz.name, reflectee.simpleName)))
    clazz.isSubclassOf(reflect.Class(reflectee))
    /*
    if ( typegen.mappedTypes.containsKey(reflectee) )
      //clazz.isSubclassOf(reflect.Class(reflectee))
      true
    else if ( typegen.mappedHigherOrderTypes.containsKey(reflectee) )
      //clazz.isSubclassOf(reflect.Class(reflectee))
      true
    else
      let(_ = trace(referent.name))
      throw("Unsure how to generate this type: \(type)")
    */
  else
    let(_ = trace(type.name))
    throw("Unsure how to generate this type: \(type)")
  /*
  if (type is reflect.DeclaredType)
    let(referent = type.referent)
    let(reflectee = type.referent.reflectee)
    if (referent is reflect.TypeAlias)
      let(_ = trace(type.name) )
      //isTypeAlias(clazz, referent.referent)
      true
    else
      clazz.isSubclassOf(reflect.Class(reflectee.getClass()))
  else if (type is reflect.UnionType)
    type.members.any((it) -> isTypeAlias(clazz, it))
  else if (type is reflect.StringLiteralType)
    false
  else throw("Unsure how to generate this type: \(type)")
  */

/*
local classComparator = (a: Gen, b: Gen) ->
  if ( (a is TypeAliasGen) &&  (b is TypeAliasGen))
    false
  else if ( (a is TypeAliasGen) && (b is ClassGen))
    let ( typealiaz = a.typealiaz )
    let ( class_is_typealias = isTypeAlias(b.clazz, typealiaz.referent) )
    let ( _ = trace(List(b.clazz.name, typealiaz.name, class_is_typealias)) )
    !class_is_typealias
  else if ( (a is ClassGen) &&  (b is TypeAliasGen) )
    let ( typealiaz = b.typealiaz )
    let ( class_is_typealias = isTypeAlias(a.clazz, typealiaz.referent) )
    let ( _ = trace(List(a.clazz.name, typealiaz.name, class_is_typealias)) )
    class_is_typealias
  else if ( a.clazz.isSubclassOf(b.clazz) )
    false // `a` is subclass of `b`
  else if ( utils.isModuleClass(a.clazz) && !(utils.isModuleClass(b.clazz)) )
    false // `a` should come last
  else
    true
*/

local classComparator = (a: Gen, b: Gen) ->
  if ( b is TypeAliasGen )
    false
  else if ( a is TypeAliasGen )
    true
  else if ( a.clazz.isSubclassOf(b.clazz) )
    false // `a` is subclass of `b`
  else if ( utils.isModuleClass(a.clazz) && !(utils.isModuleClass(b.clazz)) )
    false // `a` should come last
  else
    true

local generatedSorted = generated.sortWith(classComparator)

local convenienceLoaders = """
  @classmethod
  def load_pkl(cls, source):
  \(module.indent)# Load the Pkl module at the given source and evaluate it into `\(namespaceName).Module`.
  \(module.indent)# - Parameter source: The source of the Pkl module.
  \(module.indent)config = pkl.load(source, parser=pkl.Parser(namespace=globals()))
  \(module.indent)return config
  """

contents = new Listing {
  utils.renderHeaderComment(`module`)
  """
  from __future__ import annotations

  from dataclasses import dataclass
  from typing import Any, Dict, List, Literal, Optional, Set, Union

  import pkl

  """
  when (topLevelContents.length > 0) {
    topLevelContents.join("\n")
    ""
  }
  ""
  for (gen in generatedSorted) {
    gen.contents
    ""
    when (gen != generatedSorted.last){
      ""
    }
  }
  module.indent + convenienceLoaders.replaceAll(Regex("\n(?!\n)"), "\n\(module.indent)")
  /*
  when (!`module`.modifiers.contains("open") && !`module`.modifiers.contains("abstract")) {
    ""
    module.indent + convenienceLoaders.replaceAll(Regex("\n(?!\n)"), "\n\(module.indent)")
  }
  */
}.join("\n") + "\n"

output {
  files {
    ["\(namespaceName)_pkl.py"] {
      text = contents
    }
  }
}
